//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/Crimson.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compiler.AntlrBuild {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ICrimsonListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class CrimsonBaseListener : ICrimsonListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.scope"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScope([NotNull] CrimsonParser.ScopeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.scope"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScope([NotNull] CrimsonParser.ScopeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.importUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImportUnit([NotNull] CrimsonParser.ImportUnitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.importUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImportUnit([NotNull] CrimsonParser.ImportUnitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.operationHandler"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOperationHandler([NotNull] CrimsonParser.OperationHandlerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.operationHandler"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOperationHandler([NotNull] CrimsonParser.OperationHandlerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] CrimsonParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] CrimsonParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignVariableStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignVariableStatement([NotNull] CrimsonParser.AssignVariableStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignVariableStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignVariableStatement([NotNull] CrimsonParser.AssignVariableStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionCallStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCallStatement([NotNull] CrimsonParser.FunctionCallStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionCallStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCallStatement([NotNull] CrimsonParser.FunctionCallStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] CrimsonParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] CrimsonParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] CrimsonParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] CrimsonParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BasicCallStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasicCallStatement([NotNull] CrimsonParser.BasicCallStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BasicCallStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasicCallStatement([NotNull] CrimsonParser.BasicCallStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AssemblyCallStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssemblyCallStatement([NotNull] CrimsonParser.AssemblyCallStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AssemblyCallStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssemblyCallStatement([NotNull] CrimsonParser.AssemblyCallStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GlobalVariableStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGlobalVariableStatement([NotNull] CrimsonParser.GlobalVariableStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GlobalVariableStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGlobalVariableStatement([NotNull] CrimsonParser.GlobalVariableStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ScopeVariableStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScopeVariableStatement([NotNull] CrimsonParser.ScopeVariableStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ScopeVariableStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScopeVariableStatement([NotNull] CrimsonParser.ScopeVariableStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionDeclarationStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDeclarationStatement([NotNull] CrimsonParser.FunctionDeclarationStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionDeclarationStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDeclarationStatement([NotNull] CrimsonParser.FunctionDeclarationStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MaskDeclarationStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMaskDeclarationStatement([NotNull] CrimsonParser.MaskDeclarationStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MaskDeclarationStatement</c>
	/// labeled alternative in <see cref="CrimsonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMaskDeclarationStatement([NotNull] CrimsonParser.MaskDeclarationStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignVariableDirect</c>
	/// labeled alternative in <see cref="CrimsonParser.assignVariable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignVariableDirect([NotNull] CrimsonParser.AssignVariableDirectContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignVariableDirect</c>
	/// labeled alternative in <see cref="CrimsonParser.assignVariable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignVariableDirect([NotNull] CrimsonParser.AssignVariableDirectContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignVariableAtPointer</c>
	/// labeled alternative in <see cref="CrimsonParser.assignVariable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignVariableAtPointer([NotNull] CrimsonParser.AssignVariableAtPointerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignVariableAtPointer</c>
	/// labeled alternative in <see cref="CrimsonParser.assignVariable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignVariableAtPointer([NotNull] CrimsonParser.AssignVariableAtPointerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.ifBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfBlock([NotNull] CrimsonParser.IfBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.ifBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfBlock([NotNull] CrimsonParser.IfBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.whileBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileBlock([NotNull] CrimsonParser.WhileBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.whileBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileBlock([NotNull] CrimsonParser.WhileBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondition([NotNull] CrimsonParser.ConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondition([NotNull] CrimsonParser.ConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.elseIfBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElseIfBlock([NotNull] CrimsonParser.ElseIfBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.elseIfBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElseIfBlock([NotNull] CrimsonParser.ElseIfBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.elseBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElseBlock([NotNull] CrimsonParser.ElseBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.elseBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElseBlock([NotNull] CrimsonParser.ElseBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.basicCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasicCall([NotNull] CrimsonParser.BasicCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.basicCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasicCall([NotNull] CrimsonParser.BasicCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.assemblyCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssemblyCall([NotNull] CrimsonParser.AssemblyCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.assemblyCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssemblyCall([NotNull] CrimsonParser.AssemblyCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.globalVariableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGlobalVariableDeclaration([NotNull] CrimsonParser.GlobalVariableDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.globalVariableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGlobalVariableDeclaration([NotNull] CrimsonParser.GlobalVariableDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.scopeVariableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScopeVariableDeclaration([NotNull] CrimsonParser.ScopeVariableDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.scopeVariableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScopeVariableDeclaration([NotNull] CrimsonParser.ScopeVariableDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.functionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDeclaration([NotNull] CrimsonParser.FunctionDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.functionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDeclaration([NotNull] CrimsonParser.FunctionDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.functionHeader"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionHeader([NotNull] CrimsonParser.FunctionHeaderContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.functionHeader"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionHeader([NotNull] CrimsonParser.FunctionHeaderContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] CrimsonParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] CrimsonParser.FunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArguments([NotNull] CrimsonParser.ArgumentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArguments([NotNull] CrimsonParser.ArgumentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.functionReturn"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionReturn([NotNull] CrimsonParser.FunctionReturnContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.functionReturn"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionReturn([NotNull] CrimsonParser.FunctionReturnContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.simpleValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleValue([NotNull] CrimsonParser.SimpleValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.simpleValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleValue([NotNull] CrimsonParser.SimpleValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.complexValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComplexValue([NotNull] CrimsonParser.ComplexValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.complexValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComplexValue([NotNull] CrimsonParser.ComplexValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.rawValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRawValue([NotNull] CrimsonParser.RawValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.rawValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRawValue([NotNull] CrimsonParser.RawValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.operation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOperation([NotNull] CrimsonParser.OperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.operation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOperation([NotNull] CrimsonParser.OperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameter([NotNull] CrimsonParser.ParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameter([NotNull] CrimsonParser.ParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.parameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameterList([NotNull] CrimsonParser.ParameterListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.parameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameterList([NotNull] CrimsonParser.ParameterListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiMask</c>
	/// labeled alternative in <see cref="CrimsonParser.maskDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiMask([NotNull] CrimsonParser.MultiMaskContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiMask</c>
	/// labeled alternative in <see cref="CrimsonParser.maskDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiMask([NotNull] CrimsonParser.MultiMaskContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MonoMask</c>
	/// labeled alternative in <see cref="CrimsonParser.maskDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMonoMask([NotNull] CrimsonParser.MonoMaskContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MonoMask</c>
	/// labeled alternative in <see cref="CrimsonParser.maskDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMonoMask([NotNull] CrimsonParser.MonoMaskContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.multiMaskBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiMaskBody([NotNull] CrimsonParser.MultiMaskBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.multiMaskBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiMaskBody([NotNull] CrimsonParser.MultiMaskBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.multiMaskParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiMaskParameter([NotNull] CrimsonParser.MultiMaskParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.multiMaskParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiMaskParameter([NotNull] CrimsonParser.MultiMaskParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.array"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArray([NotNull] CrimsonParser.ArrayContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.array"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArray([NotNull] CrimsonParser.ArrayContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.datasize"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDatasize([NotNull] CrimsonParser.DatasizeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.datasize"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDatasize([NotNull] CrimsonParser.DatasizeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CrimsonParser.fullName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFullName([NotNull] CrimsonParser.FullNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CrimsonParser.fullName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFullName([NotNull] CrimsonParser.FullNameContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Compiler.AntlrBuild
