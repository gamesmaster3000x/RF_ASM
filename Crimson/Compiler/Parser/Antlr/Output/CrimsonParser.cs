//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/Crimson.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compiler.AntlrBuild {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CrimsonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Allocator=1, Function=2, Global=3, Scope=4, Return=5, Mask=6, Using=7, 
		OpHandler=8, As=9, If=10, While=11, Else=12, Elif=13, Operator=14, Asterisk=15, 
		MathsOperator=16, Comparator=17, RightArrow=18, BasicCall=19, AssemblyCall=20, 
		DirectEquals=21, PointerEquals=22, OpenBracket=23, CloseBracket=24, OpenSquare=25, 
		CloseSquare=26, Colon=27, OpenBrace=28, CloseBrace=29, OpenTriangle=30, 
		CloseTriangle=31, Comma=32, Dot=33, SemiColon=34, Underscore=35, Hashtag=36, 
		Quote=37, SkipTokens=38, LineComment=39, BlockComment=40, Number=41, String=42, 
		ShortName=43;
	public const int
		RULE_scope = 0, RULE_importUnit = 1, RULE_operationHandler = 2, RULE_statement = 3, 
		RULE_assignVariable = 4, RULE_ifBlock = 5, RULE_whileBlock = 6, RULE_condition = 7, 
		RULE_elseIfBlock = 8, RULE_elseBlock = 9, RULE_basicCall = 10, RULE_assemblyCall = 11, 
		RULE_globalVariableDeclaration = 12, RULE_scopeVariableDeclaration = 13, 
		RULE_functionDeclaration = 14, RULE_functionHeader = 15, RULE_functionCall = 16, 
		RULE_arguments = 17, RULE_functionReturn = 18, RULE_simpleValue = 19, 
		RULE_complexValue = 20, RULE_rawValue = 21, RULE_operation = 22, RULE_parameter = 23, 
		RULE_parameterList = 24, RULE_maskDeclaration = 25, RULE_multiMaskBody = 26, 
		RULE_multiMaskParameter = 27, RULE_array = 28, RULE_datasize = 29, RULE_fullName = 30;
	public static readonly string[] ruleNames = {
		"scope", "importUnit", "operationHandler", "statement", "assignVariable", 
		"ifBlock", "whileBlock", "condition", "elseIfBlock", "elseBlock", "basicCall", 
		"assemblyCall", "globalVariableDeclaration", "scopeVariableDeclaration", 
		"functionDeclaration", "functionHeader", "functionCall", "arguments", 
		"functionReturn", "simpleValue", "complexValue", "rawValue", "operation", 
		"parameter", "parameterList", "maskDeclaration", "multiMaskBody", "multiMaskParameter", 
		"array", "datasize", "fullName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'allocator'", "'function'", "'global'", "'scope'", "'return'", 
		"'mask'", "'using'", "'ophandler'", "'as'", "'if'", "'while'", "'else'", 
		"'elif'", null, "'*'", null, null, "'->'", "'B~'", "'A~'", "'='", "'*='", 
		"'('", "')'", "'['", "']'", "':'", "'{'", "'}'", "'<'", "'>'", "','", 
		"'.'", "';'", "'_'", "'#'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Allocator", "Function", "Global", "Scope", "Return", "Mask", "Using", 
		"OpHandler", "As", "If", "While", "Else", "Elif", "Operator", "Asterisk", 
		"MathsOperator", "Comparator", "RightArrow", "BasicCall", "AssemblyCall", 
		"DirectEquals", "PointerEquals", "OpenBracket", "CloseBracket", "OpenSquare", 
		"CloseSquare", "Colon", "OpenBrace", "CloseBrace", "OpenTriangle", "CloseTriangle", 
		"Comma", "Dot", "SemiColon", "Underscore", "Hashtag", "Quote", "SkipTokens", 
		"LineComment", "BlockComment", "Number", "String", "ShortName"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crimson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CrimsonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CrimsonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CrimsonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScopeContext : ParserRuleContext {
		public ImportUnitContext _importUnit;
		public IList<ImportUnitContext> _imports = new List<ImportUnitContext>();
		public OperationHandlerContext _operationHandler;
		public IList<OperationHandlerContext> _opHandlers = new List<OperationHandlerContext>();
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(CrimsonParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(CrimsonParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportUnitContext[] importUnit() {
			return GetRuleContexts<ImportUnitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportUnitContext importUnit(int i) {
			return GetRuleContext<ImportUnitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationHandlerContext[] operationHandler() {
			return GetRuleContexts<OperationHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationHandlerContext operationHandler(int i) {
			return GetRuleContext<OperationHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 0, RULE_scope);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(OpenBrace);
			State = 66;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 63;
					_localctx._importUnit = importUnit();
					_localctx._imports.Add(_localctx._importUnit);
					}
					} 
				}
				State = 68;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Hashtag) {
				{
				{
				State = 69;
				_localctx._operationHandler = operationHandler();
				_localctx._opHandlers.Add(_localctx._operationHandler);
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796094598268L) != 0) {
				{
				{
				State = 75;
				_localctx._statement = statement();
				_localctx._statements.Add(_localctx._statement);
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportUnitContext : ParserRuleContext {
		public IToken uri;
		public FullNameContext identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CrimsonParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CrimsonParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(CrimsonParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(CrimsonParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		public ImportUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterImportUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitImportUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportUnitContext importUnit() {
		ImportUnitContext _localctx = new ImportUnitContext(Context, State);
		EnterRule(_localctx, 2, RULE_importUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(Hashtag);
			State = 84;
			Match(Using);
			State = 85;
			_localctx.uri = Match(String);
			State = 86;
			Match(As);
			State = 87;
			_localctx.identifier = fullName();
			State = 88;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationHandlerContext : ParserRuleContext {
		public IToken op;
		public FullNameContext identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CrimsonParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpHandler() { return GetToken(CrimsonParser.OpHandler, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightArrow() { return GetToken(CrimsonParser.RightArrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CrimsonParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		public OperationHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterOperationHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitOperationHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationHandlerContext operationHandler() {
		OperationHandlerContext _localctx = new OperationHandlerContext(Context, State);
		EnterRule(_localctx, 4, RULE_operationHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(Hashtag);
			State = 91;
			Match(OpHandler);
			State = 92;
			_localctx.op = Match(Operator);
			State = 93;
			Match(RightArrow);
			State = 94;
			_localctx.identifier = fullName();
			State = 95;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ScopeVariableStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeVariableDeclarationContext scopeVariableDeclaration() {
			return GetRuleContext<ScopeVariableDeclarationContext>(0);
		}
		public ScopeVariableStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterScopeVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitScopeVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignVariableStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignVariableContext assignVariable() {
			return GetRuleContext<AssignVariableContext>(0);
		}
		public AssignVariableStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssignVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssignVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalVariableStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext globalVariableDeclaration() {
			return GetRuleContext<GlobalVariableDeclarationContext>(0);
		}
		public GlobalVariableStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterGlobalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitGlobalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssemblyCallStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCallContext assemblyCall() {
			return GetRuleContext<AssemblyCallContext>(0);
		}
		public AssemblyCallStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssemblyCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssemblyCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReturnContext functionReturn() {
			return GetRuleContext<FunctionReturnContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public FunctionCallStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BasicCallStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicCallContext basicCall() {
			return GetRuleContext<BasicCallContext>(0);
		}
		public BasicCallStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterBasicCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitBasicCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public FunctionDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaskDeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MaskDeclarationContext maskDeclaration() {
			return GetRuleContext<MaskDeclarationContext>(0);
		}
		public MaskDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterMaskDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitMaskDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaskDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				functionReturn();
				}
				break;
			case 2:
				_localctx = new AssignVariableStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				assignVariable();
				}
				break;
			case 3:
				_localctx = new FunctionCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 99;
				functionCall();
				State = 100;
				Match(SemiColon);
				}
				break;
			case 4:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 102;
				ifBlock();
				}
				break;
			case 5:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 103;
				whileBlock();
				}
				break;
			case 6:
				_localctx = new BasicCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 104;
				basicCall();
				}
				break;
			case 7:
				_localctx = new AssemblyCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 105;
				assemblyCall();
				}
				break;
			case 8:
				_localctx = new GlobalVariableStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 106;
				globalVariableDeclaration();
				}
				break;
			case 9:
				_localctx = new ScopeVariableStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 107;
				scopeVariableDeclaration();
				}
				break;
			case 10:
				_localctx = new FunctionDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 108;
				functionDeclaration();
				}
				break;
			case 11:
				_localctx = new MaskDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 109;
				maskDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignVariableContext : ParserRuleContext {
		public AssignVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignVariable; } }
	 
		public AssignVariableContext() { }
		public virtual void CopyFrom(AssignVariableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignVariableAtPointerContext : AssignVariableContext {
		public IToken name;
		public ComplexValueContext complex;
		public SimpleValueContext simple;
		public DatasizeContext size;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointerEquals() { return GetToken(CrimsonParser.PointerEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShortName() { return GetToken(CrimsonParser.ShortName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasizeContext datasize() {
			return GetRuleContext<DatasizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public AssignVariableAtPointerContext(AssignVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssignVariableAtPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssignVariableAtPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVariableAtPointer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignVariableDirectContext : AssignVariableContext {
		public IToken name;
		public ComplexValueContext complex;
		public SimpleValueContext simple;
		public DatasizeContext size;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectEquals() { return GetToken(CrimsonParser.DirectEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShortName() { return GetToken(CrimsonParser.ShortName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasizeContext datasize() {
			return GetRuleContext<DatasizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public AssignVariableDirectContext(AssignVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssignVariableDirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssignVariableDirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVariableDirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignVariableContext assignVariable() {
		AssignVariableContext _localctx = new AssignVariableContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignVariable);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new AssignVariableDirectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				((AssignVariableDirectContext)_localctx).name = Match(ShortName);
				State = 113;
				Match(DirectEquals);
				State = 116;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 114;
					((AssignVariableDirectContext)_localctx).complex = complexValue();
					}
					break;
				case 2:
					{
					State = 115;
					((AssignVariableDirectContext)_localctx).simple = simpleValue();
					}
					break;
				}
				State = 118;
				((AssignVariableDirectContext)_localctx).size = datasize();
				State = 119;
				Match(SemiColon);
				}
				break;
			case 2:
				_localctx = new AssignVariableAtPointerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 121;
				((AssignVariableAtPointerContext)_localctx).name = Match(ShortName);
				State = 122;
				Match(PointerEquals);
				State = 125;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 123;
					((AssignVariableAtPointerContext)_localctx).complex = complexValue();
					}
					break;
				case 2:
					{
					State = 124;
					((AssignVariableAtPointerContext)_localctx).simple = simpleValue();
					}
					break;
				}
				State = 127;
				((AssignVariableAtPointerContext)_localctx).size = datasize();
				State = 128;
				Match(SemiColon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CrimsonParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(If);
			State = 133;
			condition();
			State = 134;
			scope();
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 135;
				elseBlock();
				}
				break;
			case 2:
				{
				State = 136;
				elseIfBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CrimsonParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(While);
			State = 140;
			condition();
			State = 141;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public OperationContext op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 14, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(OpenBracket);
			State = 144;
			_localctx.op = operation();
			State = 145;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CrimsonParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_elseIfBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(Else);
			State = 148;
			ifBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CrimsonParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(Else);
			State = 151;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicCallContext : ParserRuleContext {
		public IToken basicText;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BasicCall() { return GetToken(CrimsonParser.BasicCall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(CrimsonParser.String, 0); }
		public BasicCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterBasicCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitBasicCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicCallContext basicCall() {
		BasicCallContext _localctx = new BasicCallContext(Context, State);
		EnterRule(_localctx, 20, RULE_basicCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(BasicCall);
			State = 154;
			_localctx.basicText = Match(String);
			State = 155;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCallContext : ParserRuleContext {
		public IToken assemblyText;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyCall() { return GetToken(CrimsonParser.AssemblyCall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(CrimsonParser.String, 0); }
		public AssemblyCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCallContext assemblyCall() {
		AssemblyCallContext _localctx = new AssemblyCallContext(Context, State);
		EnterRule(_localctx, 22, RULE_assemblyCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(AssemblyCall);
			State = 158;
			_localctx.assemblyText = Match(String);
			State = 159;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		public AssignVariableContext assignment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(CrimsonParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignVariableContext assignVariable() {
			return GetRuleContext<AssignVariableContext>(0);
		}
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterGlobalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitGlobalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_globalVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(Global);
			State = 162;
			_localctx.assignment = assignVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeVariableDeclarationContext : ParserRuleContext {
		public IToken name;
		public DatasizeContext size;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Scope() { return GetToken(CrimsonParser.Scope, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShortName() { return GetToken(CrimsonParser.ShortName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasizeContext datasize() {
			return GetRuleContext<DatasizeContext>(0);
		}
		public ScopeVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterScopeVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitScopeVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeVariableDeclarationContext scopeVariableDeclaration() {
		ScopeVariableDeclarationContext _localctx = new ScopeVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_scopeVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(Scope);
			State = 165;
			_localctx.name = Match(ShortName);
			State = 166;
			_localctx.size = datasize();
			State = 167;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public FunctionHeaderContext header;
		public ScopeContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(CrimsonParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeaderContext functionHeader() {
			return GetRuleContext<FunctionHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(Function);
			State = 170;
			_localctx.header = functionHeader();
			State = 171;
			_localctx.body = scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeaderContext : ParserRuleContext {
		public FullNameContext name;
		public ParameterListContext parameters;
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeaderContext functionHeader() {
		FunctionHeaderContext _localctx = new FunctionHeaderContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_localctx.name = fullName();
			State = 174;
			_localctx.parameters = parameterList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FullNameContext name;
		public ArgumentsContext args;
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_localctx.name = fullName();
			State = 177;
			_localctx.args = arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext[] simpleValue() {
			return GetRuleContexts<SimpleValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue(int i) {
			return GetRuleContext<SimpleValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CrimsonParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CrimsonParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 34, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(OpenBracket);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 15393162788864L) != 0) {
				{
				State = 180;
				simpleValue();
				}
			}

			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 183;
				Match(Comma);
				{
				State = 184;
				simpleValue();
				}
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CrimsonParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public FunctionReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionReturn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionReturnContext functionReturn() {
		FunctionReturnContext _localctx = new FunctionReturnContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionReturn);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				Match(Return);
				State = 193;
				simpleValue();
				State = 194;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				Match(Return);
				State = 197;
				Match(SemiColon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleValueContext : ParserRuleContext {
		public FullNameContext id;
		public IToken pointer;
		public RawValueContext raw;
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(CrimsonParser.Asterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RawValueContext rawValue() {
			return GetRuleContext<RawValueContext>(0);
		}
		public SimpleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterSimpleValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitSimpleValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleValueContext simpleValue() {
		SimpleValueContext _localctx = new SimpleValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_simpleValue);
		int _la;
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ShortName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				_localctx.id = fullName();
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Asterisk) {
					{
					State = 201;
					_localctx.pointer = Match(Asterisk);
					}
				}

				}
				break;
			case Number:
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204;
				_localctx.raw = rawValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexValueContext : ParserRuleContext {
		public OperationContext op;
		public FunctionCallContext func;
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ComplexValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterComplexValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitComplexValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexValueContext complexValue() {
		ComplexValueContext _localctx = new ComplexValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_complexValue);
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				_localctx.op = operation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				_localctx.func = functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(CrimsonParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(CrimsonParser.String, 0); }
		public RawValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterRawValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitRawValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RawValueContext rawValue() {
		RawValueContext _localctx = new RawValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_rawValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = TokenStream.LA(1);
			if ( !(_la==Number || _la==String) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public SimpleValueContext leftValue;
		public IToken @operator;
		public SimpleValueContext rightValue;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext[] simpleValue() {
			return GetRuleContexts<SimpleValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue(int i) {
			return GetRuleContext<SimpleValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CrimsonParser.Operator, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 44, RULE_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_localctx.leftValue = simpleValue();
			State = 214;
			_localctx.@operator = Match(Operator);
			State = 215;
			_localctx.rightValue = simpleValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public IToken name;
		public DatasizeContext size;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShortName() { return GetToken(CrimsonParser.ShortName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasizeContext datasize() {
			return GetRuleContext<DatasizeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 46, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			_localctx.name = Match(ShortName);
			State = 218;
			_localctx.size = datasize();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CrimsonParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CrimsonParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 48, RULE_parameterList);
		int _la;
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 220;
				Match(OpenBracket);
				State = 221;
				Match(CloseBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222;
				Match(OpenBracket);
				State = 223;
				parameter();
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 224;
					Match(Comma);
					State = 225;
					parameter();
					}
					}
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 231;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaskDeclarationContext : ParserRuleContext {
		public MaskDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maskDeclaration; } }
	 
		public MaskDeclarationContext() { }
		public virtual void CopyFrom(MaskDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiMaskContext : MaskDeclarationContext {
		public FullNameContext name;
		public MultiMaskBodyContext multiBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mask() { return GetToken(CrimsonParser.Mask, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiMaskBodyContext multiMaskBody() {
			return GetRuleContext<MultiMaskBodyContext>(0);
		}
		public MultiMaskContext(MaskDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterMultiMask(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitMultiMask(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiMask(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MonoMaskContext : MaskDeclarationContext {
		public FullNameContext name;
		public DatasizeContext monoSize;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mask() { return GetToken(CrimsonParser.Mask, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasizeContext datasize() {
			return GetRuleContext<DatasizeContext>(0);
		}
		public MonoMaskContext(MaskDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterMonoMask(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitMonoMask(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonoMask(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaskDeclarationContext maskDeclaration() {
		MaskDeclarationContext _localctx = new MaskDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_maskDeclaration);
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new MultiMaskContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				Match(Mask);
				State = 236;
				((MultiMaskContext)_localctx).name = fullName();
				State = 237;
				((MultiMaskContext)_localctx).multiBody = multiMaskBody();
				}
				break;
			case 2:
				_localctx = new MonoMaskContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 239;
				Match(Mask);
				State = 240;
				((MonoMaskContext)_localctx).name = fullName();
				State = 241;
				((MonoMaskContext)_localctx).monoSize = datasize();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiMaskBodyContext : ParserRuleContext {
		public MultiMaskParameterContext _multiMaskParameter;
		public IList<MultiMaskParameterContext> _parameters = new List<MultiMaskParameterContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiMaskParameterContext[] multiMaskParameter() {
			return GetRuleContexts<MultiMaskParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiMaskParameterContext multiMaskParameter(int i) {
			return GetRuleContext<MultiMaskParameterContext>(i);
		}
		public MultiMaskBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiMaskBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterMultiMaskBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitMultiMaskBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiMaskBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiMaskBodyContext multiMaskBody() {
		MultiMaskBodyContext _localctx = new MultiMaskBodyContext(Context, State);
		EnterRule(_localctx, 52, RULE_multiMaskBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(OpenBracket);
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ShortName) {
				{
				{
				State = 246;
				_localctx._multiMaskParameter = multiMaskParameter();
				_localctx._parameters.Add(_localctx._multiMaskParameter);
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 252;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiMaskParameterContext : ParserRuleContext {
		public IToken name;
		public DatasizeContext size;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShortName() { return GetToken(CrimsonParser.ShortName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasizeContext datasize() {
			return GetRuleContext<DatasizeContext>(0);
		}
		public MultiMaskParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiMaskParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterMultiMaskParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitMultiMaskParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiMaskParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiMaskParameterContext multiMaskParameter() {
		MultiMaskParameterContext _localctx = new MultiMaskParameterContext(Context, State);
		EnterRule(_localctx, 54, RULE_multiMaskParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_localctx.name = Match(ShortName);
			State = 255;
			_localctx.size = datasize();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public DatasizeContext blockSize;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenSquare() { return GetToken(CrimsonParser.OpenSquare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseSquare() { return GetToken(CrimsonParser.CloseSquare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasizeContext datasize() {
			return GetRuleContext<DatasizeContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 56, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(OpenSquare);
			State = 258;
			_localctx.blockSize = datasize();
			State = 259;
			Match(CloseSquare);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasizeContext : ParserRuleContext {
		public SimpleValueContext sizeVal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenTriangle() { return GetToken(CrimsonParser.OpenTriangle, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseTriangle() { return GetToken(CrimsonParser.CloseTriangle, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public DatasizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterDatasize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitDatasize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasizeContext datasize() {
		DatasizeContext _localctx = new DatasizeContext(Context, State);
		EnterRule(_localctx, 58, RULE_datasize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(OpenTriangle);
			State = 262;
			_localctx.sizeVal = simpleValue();
			State = 263;
			Match(CloseTriangle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullNameContext : ParserRuleContext {
		public IToken libraryName;
		public IToken memberName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ShortName() { return GetTokens(CrimsonParser.ShortName); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShortName(int i) {
			return GetToken(CrimsonParser.ShortName, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(CrimsonParser.Dot, 0); }
		public FullNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFullName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFullName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullNameContext fullName() {
		FullNameContext _localctx = new FullNameContext(Context, State);
		EnterRule(_localctx, 60, RULE_fullName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 265;
				_localctx.libraryName = Match(ShortName);
				State = 266;
				Match(Dot);
				}
				break;
			}
			State = 269;
			_localctx.memberName = Match(ShortName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,43,272,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,1,0,1,0,5,0,65,8,0,10,0,12,0,68,9,0,1,0,5,0,71,8,0,
		10,0,12,0,74,9,0,1,0,5,0,77,8,0,10,0,12,0,80,9,0,1,0,1,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,3,3,111,8,3,1,4,1,4,1,4,1,4,3,4,117,8,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,3,4,126,8,4,1,4,1,4,1,4,3,4,131,8,4,1,5,1,5,1,5,
		1,5,1,5,3,5,138,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,
		9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,
		1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,
		1,17,3,17,182,8,17,1,17,1,17,5,17,186,8,17,10,17,12,17,189,9,17,1,17,1,
		17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,199,8,18,1,19,1,19,3,19,203,8,19,
		1,19,3,19,206,8,19,1,20,1,20,3,20,210,8,20,1,21,1,21,1,22,1,22,1,22,1,
		22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,5,24,227,8,24,10,24,12,
		24,230,9,24,1,24,1,24,3,24,234,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,3,25,244,8,25,1,26,1,26,5,26,248,8,26,10,26,12,26,251,9,26,1,26,1,
		26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,3,
		30,268,8,30,1,30,1,30,1,30,0,0,31,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,0,1,1,0,41,42,269,0,
		62,1,0,0,0,2,83,1,0,0,0,4,90,1,0,0,0,6,110,1,0,0,0,8,130,1,0,0,0,10,132,
		1,0,0,0,12,139,1,0,0,0,14,143,1,0,0,0,16,147,1,0,0,0,18,150,1,0,0,0,20,
		153,1,0,0,0,22,157,1,0,0,0,24,161,1,0,0,0,26,164,1,0,0,0,28,169,1,0,0,
		0,30,173,1,0,0,0,32,176,1,0,0,0,34,179,1,0,0,0,36,198,1,0,0,0,38,205,1,
		0,0,0,40,209,1,0,0,0,42,211,1,0,0,0,44,213,1,0,0,0,46,217,1,0,0,0,48,233,
		1,0,0,0,50,243,1,0,0,0,52,245,1,0,0,0,54,254,1,0,0,0,56,257,1,0,0,0,58,
		261,1,0,0,0,60,267,1,0,0,0,62,66,5,28,0,0,63,65,3,2,1,0,64,63,1,0,0,0,
		65,68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,72,1,0,0,0,68,66,1,0,0,0,
		69,71,3,4,2,0,70,69,1,0,0,0,71,74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,
		73,78,1,0,0,0,74,72,1,0,0,0,75,77,3,6,3,0,76,75,1,0,0,0,77,80,1,0,0,0,
		78,76,1,0,0,0,78,79,1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,5,29,0,0,
		82,1,1,0,0,0,83,84,5,36,0,0,84,85,5,7,0,0,85,86,5,42,0,0,86,87,5,9,0,0,
		87,88,3,60,30,0,88,89,5,34,0,0,89,3,1,0,0,0,90,91,5,36,0,0,91,92,5,8,0,
		0,92,93,5,14,0,0,93,94,5,18,0,0,94,95,3,60,30,0,95,96,5,34,0,0,96,5,1,
		0,0,0,97,111,3,36,18,0,98,111,3,8,4,0,99,100,3,32,16,0,100,101,5,34,0,
		0,101,111,1,0,0,0,102,111,3,10,5,0,103,111,3,12,6,0,104,111,3,20,10,0,
		105,111,3,22,11,0,106,111,3,24,12,0,107,111,3,26,13,0,108,111,3,28,14,
		0,109,111,3,50,25,0,110,97,1,0,0,0,110,98,1,0,0,0,110,99,1,0,0,0,110,102,
		1,0,0,0,110,103,1,0,0,0,110,104,1,0,0,0,110,105,1,0,0,0,110,106,1,0,0,
		0,110,107,1,0,0,0,110,108,1,0,0,0,110,109,1,0,0,0,111,7,1,0,0,0,112,113,
		5,43,0,0,113,116,5,21,0,0,114,117,3,40,20,0,115,117,3,38,19,0,116,114,
		1,0,0,0,116,115,1,0,0,0,117,118,1,0,0,0,118,119,3,58,29,0,119,120,5,34,
		0,0,120,131,1,0,0,0,121,122,5,43,0,0,122,125,5,22,0,0,123,126,3,40,20,
		0,124,126,3,38,19,0,125,123,1,0,0,0,125,124,1,0,0,0,126,127,1,0,0,0,127,
		128,3,58,29,0,128,129,5,34,0,0,129,131,1,0,0,0,130,112,1,0,0,0,130,121,
		1,0,0,0,131,9,1,0,0,0,132,133,5,10,0,0,133,134,3,14,7,0,134,137,3,0,0,
		0,135,138,3,18,9,0,136,138,3,16,8,0,137,135,1,0,0,0,137,136,1,0,0,0,137,
		138,1,0,0,0,138,11,1,0,0,0,139,140,5,11,0,0,140,141,3,14,7,0,141,142,3,
		0,0,0,142,13,1,0,0,0,143,144,5,23,0,0,144,145,3,44,22,0,145,146,5,24,0,
		0,146,15,1,0,0,0,147,148,5,12,0,0,148,149,3,10,5,0,149,17,1,0,0,0,150,
		151,5,12,0,0,151,152,3,0,0,0,152,19,1,0,0,0,153,154,5,19,0,0,154,155,5,
		42,0,0,155,156,5,34,0,0,156,21,1,0,0,0,157,158,5,20,0,0,158,159,5,42,0,
		0,159,160,5,34,0,0,160,23,1,0,0,0,161,162,5,3,0,0,162,163,3,8,4,0,163,
		25,1,0,0,0,164,165,5,4,0,0,165,166,5,43,0,0,166,167,3,58,29,0,167,168,
		5,34,0,0,168,27,1,0,0,0,169,170,5,2,0,0,170,171,3,30,15,0,171,172,3,0,
		0,0,172,29,1,0,0,0,173,174,3,60,30,0,174,175,3,48,24,0,175,31,1,0,0,0,
		176,177,3,60,30,0,177,178,3,34,17,0,178,33,1,0,0,0,179,181,5,23,0,0,180,
		182,3,38,19,0,181,180,1,0,0,0,181,182,1,0,0,0,182,187,1,0,0,0,183,184,
		5,32,0,0,184,186,3,38,19,0,185,183,1,0,0,0,186,189,1,0,0,0,187,185,1,0,
		0,0,187,188,1,0,0,0,188,190,1,0,0,0,189,187,1,0,0,0,190,191,5,24,0,0,191,
		35,1,0,0,0,192,193,5,5,0,0,193,194,3,38,19,0,194,195,5,34,0,0,195,199,
		1,0,0,0,196,197,5,5,0,0,197,199,5,34,0,0,198,192,1,0,0,0,198,196,1,0,0,
		0,199,37,1,0,0,0,200,202,3,60,30,0,201,203,5,15,0,0,202,201,1,0,0,0,202,
		203,1,0,0,0,203,206,1,0,0,0,204,206,3,42,21,0,205,200,1,0,0,0,205,204,
		1,0,0,0,206,39,1,0,0,0,207,210,3,44,22,0,208,210,3,32,16,0,209,207,1,0,
		0,0,209,208,1,0,0,0,210,41,1,0,0,0,211,212,7,0,0,0,212,43,1,0,0,0,213,
		214,3,38,19,0,214,215,5,14,0,0,215,216,3,38,19,0,216,45,1,0,0,0,217,218,
		5,43,0,0,218,219,3,58,29,0,219,47,1,0,0,0,220,221,5,23,0,0,221,234,5,24,
		0,0,222,223,5,23,0,0,223,228,3,46,23,0,224,225,5,32,0,0,225,227,3,46,23,
		0,226,224,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,
		231,1,0,0,0,230,228,1,0,0,0,231,232,5,24,0,0,232,234,1,0,0,0,233,220,1,
		0,0,0,233,222,1,0,0,0,234,49,1,0,0,0,235,236,5,6,0,0,236,237,3,60,30,0,
		237,238,3,52,26,0,238,244,1,0,0,0,239,240,5,6,0,0,240,241,3,60,30,0,241,
		242,3,58,29,0,242,244,1,0,0,0,243,235,1,0,0,0,243,239,1,0,0,0,244,51,1,
		0,0,0,245,249,5,23,0,0,246,248,3,54,27,0,247,246,1,0,0,0,248,251,1,0,0,
		0,249,247,1,0,0,0,249,250,1,0,0,0,250,252,1,0,0,0,251,249,1,0,0,0,252,
		253,5,24,0,0,253,53,1,0,0,0,254,255,5,43,0,0,255,256,3,58,29,0,256,55,
		1,0,0,0,257,258,5,25,0,0,258,259,3,58,29,0,259,260,5,26,0,0,260,57,1,0,
		0,0,261,262,5,30,0,0,262,263,3,38,19,0,263,264,5,31,0,0,264,59,1,0,0,0,
		265,266,5,43,0,0,266,268,5,33,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,
		269,1,0,0,0,269,270,5,43,0,0,270,61,1,0,0,0,19,66,72,78,110,116,125,130,
		137,181,187,198,202,205,209,228,233,243,249,267
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Compiler.AntlrBuild
