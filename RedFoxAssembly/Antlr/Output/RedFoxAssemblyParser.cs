//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/RedFoxAssembly.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RedFoxAssembly.AntlrBuild {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class RedFoxAssemblyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LabelStart=1, Width=2, Repeat=3, Literal=4, WordValue=5, ByteValue=6, 
		End=7, HLT=8, NOP=9, ADD=10, SUB=11, LSL=12, LSR=13, NEG=14, NOT=15, CMP=16, 
		JMP=17, BFG=18, BSR=19, RTN=20, RRB=21, RRW=22, RMB=23, RMW=24, WRB=25, 
		WRW=26, WMB=27, WMW=28, RVB=29, RVW=30, SIN=31, INT=32, SFG=33, AND=34, 
		LOR=35, XOR=36, RegisterPrefix=37, HexPrefix=38, Underscore=39, Quote=40, 
		Blank=41, Space=42, Tab=43, Digit=44, ByteLetter=45, Identifier=46, SkipTokens=47, 
		LineComment=48, EOL=49;
	public const int
		RULE_program = 0, RULE_metadata = 1, RULE_literal = 2, RULE_configuration = 3, 
		RULE_width = 4, RULE_value = 5, RULE_command = 6, RULE_label = 7, RULE_repeat = 8, 
		RULE_instruction = 9, RULE_hlt = 10, RULE_nop = 11, RULE_add = 12, RULE_sub = 13, 
		RULE_lsl = 14, RULE_lsr = 15, RULE_neg = 16, RULE_not = 17, RULE_cmp = 18, 
		RULE_jmp = 19, RULE_bfg = 20, RULE_bsr = 21, RULE_rtn = 22, RULE_rrb = 23, 
		RULE_rrw = 24, RULE_rmb = 25, RULE_rmw = 26, RULE_wrb = 27, RULE_wrw = 28, 
		RULE_wmb = 29, RULE_wmw = 30, RULE_rvb = 31, RULE_rvw = 32, RULE_sin = 33, 
		RULE_int = 34, RULE_sfg = 35, RULE_and = 36, RULE_lor = 37, RULE_xor = 38, 
		RULE_end = 39, RULE_word = 40, RULE_byte = 41, RULE_bytedata = 42;
	public static readonly string[] ruleNames = {
		"program", "metadata", "literal", "configuration", "width", "value", "command", 
		"label", "repeat", "instruction", "hlt", "nop", "add", "sub", "lsl", "lsr", 
		"neg", "not", "cmp", "jmp", "bfg", "bsr", "rtn", "rrb", "rrw", "rmb", 
		"rmw", "wrb", "wrw", "wmb", "wmw", "rvb", "rvw", "sin", "int", "sfg", 
		"and", "lor", "xor", "end", "word", "byte", "bytedata"
	};

	private static readonly string[] _LiteralNames = {
		null, "'::'", "'.width'", "'.repeat'", "'$'", "'.word'", "'.byte'", "'.end'", 
		"'HLT'", "'NOP'", "'ADD'", "'SUB'", "'LSL'", "'LSR'", "'NEG'", "'NOT'", 
		"'CMP'", "'JMP'", "'BFG'", "'BSR'", "'RTN'", "'RRB'", "'RRW'", "'RMB'", 
		"'RMW'", "'WRB'", "'WRW'", "'WMB'", "'WMW'", "'RVB'", "'RVW'", "'SIN'", 
		"'INT'", "'SFG'", "'AND'", "'LOR'", "'XOR'", null, "'0x'", "'_'", "'''", 
		null, "' '", "'\\t'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LabelStart", "Width", "Repeat", "Literal", "WordValue", "ByteValue", 
		"End", "HLT", "NOP", "ADD", "SUB", "LSL", "LSR", "NEG", "NOT", "CMP", 
		"JMP", "BFG", "BSR", "RTN", "RRB", "RRW", "RMB", "RMW", "WRB", "WRW", 
		"WMB", "WMW", "RVB", "RVW", "SIN", "INT", "SFG", "AND", "LOR", "XOR", 
		"RegisterPrefix", "HexPrefix", "Underscore", "Quote", "Blank", "Space", 
		"Tab", "Digit", "ByteLetter", "Identifier", "SkipTokens", "LineComment", 
		"EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RedFoxAssembly.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RedFoxAssemblyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RedFoxAssemblyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RedFoxAssemblyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public MetadataContext _metadata;
		public IList<MetadataContext> _metadatas = new List<MetadataContext>();
		public ConfigurationContext _configuration;
		public IList<ConfigurationContext> _configurations = new List<ConfigurationContext>();
		public CommandContext _command;
		public IList<CommandContext> _commands = new List<CommandContext>();
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetadataContext[] metadata() {
			return GetRuleContexts<MetadataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetadataContext metadata(int i) {
			return GetRuleContext<MetadataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigurationContext[] configuration() {
			return GetRuleContexts<ConfigurationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigurationContext configuration(int i) {
			return GetRuleContext<ConfigurationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Literal) {
				{
				{
				State = 86;
				_localctx._metadata = metadata();
				_localctx._metadatas.Add(_localctx._metadata);
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 92;
				_localctx._configuration = configuration();
				_localctx._configurations.Add(_localctx._configuration);
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 100L) != 0 );
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 97;
				_localctx._command = command();
				_localctx._commands.Add(_localctx._command);
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 137438953226L) != 0 );
			{
			State = 102;
			end();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataContext : ParserRuleContext {
		public MetadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadata; } }
	 
		public MetadataContext() { }
		public virtual void CopyFrom(MetadataContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralMetadataContext : MetadataContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(RedFoxAssemblyParser.EOL, 0); }
		public LiteralMetadataContext(MetadataContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterLiteralMetadata(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitLiteralMetadata(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralMetadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataContext metadata() {
		MetadataContext _localctx = new MetadataContext(Context, State);
		EnterRule(_localctx, 2, RULE_metadata);
		try {
			_localctx = new LiteralMetadataContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			literal();
			State = 105;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IToken contents;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Literal() { return GetTokens(RedFoxAssemblyParser.Literal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Literal(int i) {
			return GetToken(RedFoxAssemblyParser.Literal, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(RedFoxAssemblyParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(RedFoxAssemblyParser.EOL, i);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 4, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(Literal);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 562949953421294L) != 0) {
				{
				{
				State = 108;
				_localctx.contents = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Literal || _la==EOL) ) {
					_localctx.contents = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 114;
			Match(Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigurationContext : ParserRuleContext {
		public ConfigurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configuration; } }
	 
		public ConfigurationContext() { }
		public virtual void CopyFrom(ConfigurationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WidthConfigurationContext : ConfigurationContext {
		[System.Diagnostics.DebuggerNonUserCode] public WidthContext width() {
			return GetRuleContext<WidthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(RedFoxAssemblyParser.EOL, 0); }
		public WidthConfigurationContext(ConfigurationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterWidthConfiguration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitWidthConfiguration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthConfiguration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueConfigurationContext : ConfigurationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(RedFoxAssemblyParser.EOL, 0); }
		public ValueConfigurationContext(ConfigurationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterValueConfiguration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitValueConfiguration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueConfiguration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigurationContext configuration() {
		ConfigurationContext _localctx = new ConfigurationContext(Context, State);
		EnterRule(_localctx, 6, RULE_configuration);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Width:
				_localctx = new WidthConfigurationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				width();
				State = 117;
				Match(EOL);
				}
				break;
			case WordValue:
			case ByteValue:
				_localctx = new ValueConfigurationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				value();
				State = 120;
				Match(EOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthContext : ParserRuleContext {
		public IToken val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Width() { return GetToken(RedFoxAssemblyParser.Width, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Digit() { return GetToken(RedFoxAssemblyParser.Digit, 0); }
		public WidthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_width; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterWidth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitWidth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthContext width() {
		WidthContext _localctx = new WidthContext(Context, State);
		EnterRule(_localctx, 8, RULE_width);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(Width);
			State = 125;
			Match(Blank);
			State = 126;
			_localctx.val = Match(Digit);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public IToken id;
		public WordContext wordValue;
		public ByteContext byteValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WordValue() { return GetToken(RedFoxAssemblyParser.WordValue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Blank() { return GetTokens(RedFoxAssemblyParser.Blank); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank(int i) {
			return GetToken(RedFoxAssemblyParser.Blank, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RedFoxAssemblyParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ByteValue() { return GetToken(RedFoxAssemblyParser.ByteValue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext @byte() {
			return GetRuleContext<ByteContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_value);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WordValue:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				Match(WordValue);
				State = 129;
				Match(Blank);
				State = 130;
				_localctx.id = Match(Identifier);
				State = 131;
				Match(Blank);
				State = 132;
				_localctx.wordValue = word();
				}
				break;
			case ByteValue:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				Match(ByteValue);
				State = 134;
				Match(Blank);
				State = 135;
				_localctx.id = Match(Identifier);
				State = 136;
				Match(Blank);
				State = 137;
				_localctx.byteValue = @byte();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	 
		public CommandContext() { }
		public virtual void CopyFrom(CommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InstructionCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(RedFoxAssemblyParser.EOL, 0); }
		public InstructionCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterInstructionCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitInstructionCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LabelCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(RedFoxAssemblyParser.EOL, 0); }
		public LabelCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterLabelCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitLabelCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(RedFoxAssemblyParser.EOL, 0); }
		public RepeatCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRepeatCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRepeatCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_command);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LabelStart:
				_localctx = new LabelCommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				label();
				State = 141;
				Match(EOL);
				}
				break;
			case HLT:
			case NOP:
			case ADD:
			case SUB:
			case LSL:
			case LSR:
			case NEG:
			case NOT:
			case CMP:
			case JMP:
			case BFG:
			case BSR:
			case RTN:
			case RRB:
			case RRW:
			case RMB:
			case RMW:
			case WRB:
			case WRW:
			case WMB:
			case WMW:
			case RVB:
			case RVW:
			case SIN:
			case INT:
			case SFG:
			case AND:
			case LOR:
			case XOR:
				_localctx = new InstructionCommandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 143;
				instruction();
				State = 144;
				Match(EOL);
				}
				break;
			case Repeat:
				_localctx = new RepeatCommandContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				repeat();
				State = 147;
				Match(EOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LabelStart() { return GetToken(RedFoxAssemblyParser.LabelStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RedFoxAssemblyParser.Identifier, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 14, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(LabelStart);
			State = 152;
			_localctx.id = Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public IToken _Digit;
		public IList<IToken> _times = new List<IToken>();
		public ByteContext _byte;
		public IList<ByteContext> _bytes = new List<ByteContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(RedFoxAssemblyParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Blank() { return GetTokens(RedFoxAssemblyParser.Blank); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank(int i) {
			return GetToken(RedFoxAssemblyParser.Blank, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Digit() { return GetTokens(RedFoxAssemblyParser.Digit); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Digit(int i) {
			return GetToken(RedFoxAssemblyParser.Digit, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext[] @byte() {
			return GetRuleContexts<ByteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext @byte(int i) {
			return GetRuleContext<ByteContext>(i);
		}
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 16, RULE_repeat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(Repeat);
			State = 155;
			Match(Blank);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 156;
				_localctx._Digit = Match(Digit);
				_localctx._times.Add(_localctx._Digit);
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Digit );
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 161;
				Match(Blank);
				State = 162;
				_localctx._byte = @byte();
				_localctx._bytes.Add(_localctx._byte);
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Blank );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
	 
		public InstructionContext() { }
		public virtual void CopyFrom(InstructionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WRBInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public WrbContext wrb() {
			return GetRuleContext<WrbContext>(0);
		}
		public WRBInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterWRBInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitWRBInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWRBInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RMBInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RmbContext rmb() {
			return GetRuleContext<RmbContext>(0);
		}
		public RMBInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRMBInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRMBInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRMBInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RMWInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RmwContext rmw() {
			return GetRuleContext<RmwContext>(0);
		}
		public RMWInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRMWInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRMWInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRMWInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WMWInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public WmwContext wmw() {
			return GetRuleContext<WmwContext>(0);
		}
		public WMWInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterWMWInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitWMWInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWMWInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JMPInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public JmpContext jmp() {
			return GetRuleContext<JmpContext>(0);
		}
		public JMPInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterJMPInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitJMPInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJMPInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WRWInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public WrwContext wrw() {
			return GetRuleContext<WrwContext>(0);
		}
		public WRWInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterWRWInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitWRWInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWRWInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RVBInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RvbContext rvb() {
			return GetRuleContext<RvbContext>(0);
		}
		public RVBInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRVBInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRVBInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRVBInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LORInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LorContext lor() {
			return GetRuleContext<LorContext>(0);
		}
		public LORInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterLORInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitLORInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLORInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMPInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CmpContext cmp() {
			return GetRuleContext<CmpContext>(0);
		}
		public CMPInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterCMPInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitCMPInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMPInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SUBInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubContext sub() {
			return GetRuleContext<SubContext>(0);
		}
		public SUBInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterSUBInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitSUBInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSUBInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ANDInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndContext and() {
			return GetRuleContext<AndContext>(0);
		}
		public ANDInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterANDInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitANDInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitANDInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LSLInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LslContext lsl() {
			return GetRuleContext<LslContext>(0);
		}
		public LSLInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterLSLInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitLSLInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLSLInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RRBInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RrbContext rrb() {
			return GetRuleContext<RrbContext>(0);
		}
		public RRBInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRRBInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRRBInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRRBInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BSRInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BsrContext bsr() {
			return GetRuleContext<BsrContext>(0);
		}
		public BSRInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterBSRInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitBSRInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBSRInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BFGInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BfgContext bfg() {
			return GetRuleContext<BfgContext>(0);
		}
		public BFGInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterBFGInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitBFGInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBFGInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XORInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public XorContext xor() {
			return GetRuleContext<XorContext>(0);
		}
		public XORInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterXORInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitXORInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXORInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INTInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public INTInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterINTInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitINTInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINTInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RTNInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RtnContext rtn() {
			return GetRuleContext<RtnContext>(0);
		}
		public RTNInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRTNInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRTNInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRTNInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RVWInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RvwContext rvw() {
			return GetRuleContext<RvwContext>(0);
		}
		public RVWInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRVWInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRVWInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRVWInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HLTInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public HltContext hlt() {
			return GetRuleContext<HltContext>(0);
		}
		public HLTInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterHLTInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitHLTInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHLTInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RRWInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RrwContext rrw() {
			return GetRuleContext<RrwContext>(0);
		}
		public RRWInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRRWInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRRWInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRRWInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NOTInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotContext not() {
			return GetRuleContext<NotContext>(0);
		}
		public NOTInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterNOTInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitNOTInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNOTInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NEGInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegContext neg() {
			return GetRuleContext<NegContext>(0);
		}
		public NEGInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterNEGInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitNEGInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNEGInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WMBInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public WmbContext wmb() {
			return GetRuleContext<WmbContext>(0);
		}
		public WMBInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterWMBInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitWMBInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWMBInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NOPInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NopContext nop() {
			return GetRuleContext<NopContext>(0);
		}
		public NOPInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterNOPInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitNOPInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNOPInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SFGInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SfgContext sfg() {
			return GetRuleContext<SfgContext>(0);
		}
		public SFGInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterSFGInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitSFGInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSFGInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ADDInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public ADDInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterADDInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitADDInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitADDInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SINInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SinContext sin() {
			return GetRuleContext<SinContext>(0);
		}
		public SINInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterSINInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitSINInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSINInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LSRInstructionContext : InstructionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LsrContext lsr() {
			return GetRuleContext<LsrContext>(0);
		}
		public LSRInstructionContext(InstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterLSRInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitLSRInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLSRInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 18, RULE_instruction);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HLT:
				_localctx = new HLTInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				hlt();
				}
				break;
			case NOP:
				_localctx = new NOPInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				nop();
				}
				break;
			case ADD:
				_localctx = new ADDInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 169;
				add();
				}
				break;
			case SUB:
				_localctx = new SUBInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 170;
				sub();
				}
				break;
			case LSL:
				_localctx = new LSLInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 171;
				lsl();
				}
				break;
			case LSR:
				_localctx = new LSRInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 172;
				lsr();
				}
				break;
			case NEG:
				_localctx = new NEGInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 173;
				neg();
				}
				break;
			case NOT:
				_localctx = new NOTInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 174;
				not();
				}
				break;
			case CMP:
				_localctx = new CMPInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 175;
				cmp();
				}
				break;
			case JMP:
				_localctx = new JMPInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 176;
				jmp();
				}
				break;
			case BFG:
				_localctx = new BFGInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 177;
				bfg();
				}
				break;
			case BSR:
				_localctx = new BSRInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 178;
				bsr();
				}
				break;
			case RTN:
				_localctx = new RTNInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 179;
				rtn();
				}
				break;
			case RRB:
				_localctx = new RRBInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 180;
				rrb();
				}
				break;
			case RRW:
				_localctx = new RRWInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 181;
				rrw();
				}
				break;
			case RMB:
				_localctx = new RMBInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 182;
				rmb();
				}
				break;
			case RMW:
				_localctx = new RMWInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 183;
				rmw();
				}
				break;
			case WRB:
				_localctx = new WRBInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 184;
				wrb();
				}
				break;
			case WRW:
				_localctx = new WRWInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 185;
				wrw();
				}
				break;
			case WMB:
				_localctx = new WMBInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 186;
				wmb();
				}
				break;
			case WMW:
				_localctx = new WMWInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 187;
				wmw();
				}
				break;
			case RVB:
				_localctx = new RVBInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 188;
				rvb();
				}
				break;
			case RVW:
				_localctx = new RVWInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 189;
				rvw();
				}
				break;
			case SIN:
				_localctx = new SINInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 190;
				sin();
				}
				break;
			case INT:
				_localctx = new INTInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 191;
				@int();
				}
				break;
			case SFG:
				_localctx = new SFGInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 192;
				sfg();
				}
				break;
			case AND:
				_localctx = new ANDInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 193;
				and();
				}
				break;
			case LOR:
				_localctx = new LORInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 194;
				lor();
				}
				break;
			case XOR:
				_localctx = new XORInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 195;
				xor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HltContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HLT() { return GetToken(RedFoxAssemblyParser.HLT, 0); }
		public HltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hlt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterHlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitHlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HltContext hlt() {
		HltContext _localctx = new HltContext(Context, State);
		EnterRule(_localctx, 20, RULE_hlt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			_localctx.op = Match(HLT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NopContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP() { return GetToken(RedFoxAssemblyParser.NOP, 0); }
		public NopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterNop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitNop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NopContext nop() {
		NopContext _localctx = new NopContext(Context, State);
		EnterRule(_localctx, 22, RULE_nop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_localctx.op = Match(NOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(RedFoxAssemblyParser.ADD, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 24, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_localctx.op = Match(ADD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(RedFoxAssemblyParser.SUB, 0); }
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(Context, State);
		EnterRule(_localctx, 26, RULE_sub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_localctx.op = Match(SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LslContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSL() { return GetToken(RedFoxAssemblyParser.LSL, 0); }
		public LslContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterLsl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitLsl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LslContext lsl() {
		LslContext _localctx = new LslContext(Context, State);
		EnterRule(_localctx, 28, RULE_lsl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_localctx.op = Match(LSL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsrContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR() { return GetToken(RedFoxAssemblyParser.LSR, 0); }
		public LsrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterLsr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitLsr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsrContext lsr() {
		LsrContext _localctx = new LsrContext(Context, State);
		EnterRule(_localctx, 30, RULE_lsr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_localctx.op = Match(LSR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEG() { return GetToken(RedFoxAssemblyParser.NEG, 0); }
		public NegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterNeg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitNeg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegContext neg() {
		NegContext _localctx = new NegContext(Context, State);
		EnterRule(_localctx, 32, RULE_neg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_localctx.op = Match(NEG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RedFoxAssemblyParser.NOT, 0); }
		public NotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotContext not() {
		NotContext _localctx = new NotContext(Context, State);
		EnterRule(_localctx, 34, RULE_not);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_localctx.op = Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP() { return GetToken(RedFoxAssemblyParser.CMP, 0); }
		public CmpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterCmp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitCmp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpContext cmp() {
		CmpContext _localctx = new CmpContext(Context, State);
		EnterRule(_localctx, 36, RULE_cmp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			_localctx.op = Match(CMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JmpContext : ParserRuleContext {
		public IToken op;
		public WordContext arg1w;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JMP() { return GetToken(RedFoxAssemblyParser.JMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public JmpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jmp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterJmp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitJmp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJmp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JmpContext jmp() {
		JmpContext _localctx = new JmpContext(Context, State);
		EnterRule(_localctx, 38, RULE_jmp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_localctx.op = Match(JMP);
			State = 217;
			Match(Blank);
			State = 218;
			_localctx.arg1w = word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BfgContext : ParserRuleContext {
		public IToken op;
		public WordContext arg1w;
		public ByteContext arg2b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BFG() { return GetToken(RedFoxAssemblyParser.BFG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext @byte() {
			return GetRuleContext<ByteContext>(0);
		}
		public BfgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bfg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterBfg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitBfg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBfg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BfgContext bfg() {
		BfgContext _localctx = new BfgContext(Context, State);
		EnterRule(_localctx, 40, RULE_bfg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_localctx.op = Match(BFG);
			State = 221;
			Match(Blank);
			State = 222;
			_localctx.arg1w = word();
			State = 223;
			_localctx.arg2b = @byte();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BsrContext : ParserRuleContext {
		public IToken op;
		public WordContext arg1w;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BSR() { return GetToken(RedFoxAssemblyParser.BSR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public BsrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bsr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterBsr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitBsr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBsr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BsrContext bsr() {
		BsrContext _localctx = new BsrContext(Context, State);
		EnterRule(_localctx, 42, RULE_bsr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			_localctx.op = Match(BSR);
			State = 226;
			Match(Blank);
			State = 227;
			_localctx.arg1w = word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtnContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTN() { return GetToken(RedFoxAssemblyParser.RTN, 0); }
		public RtnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRtn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRtn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRtn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RtnContext rtn() {
		RtnContext _localctx = new RtnContext(Context, State);
		EnterRule(_localctx, 44, RULE_rtn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			_localctx.op = Match(RTN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RrbContext : ParserRuleContext {
		public IToken op;
		public ByteContext arg1b;
		public ByteContext arg2b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Blank() { return GetTokens(RedFoxAssemblyParser.Blank); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank(int i) {
			return GetToken(RedFoxAssemblyParser.Blank, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRB() { return GetToken(RedFoxAssemblyParser.RRB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext[] @byte() {
			return GetRuleContexts<ByteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext @byte(int i) {
			return GetRuleContext<ByteContext>(i);
		}
		public RrbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rrb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRrb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRrb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRrb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RrbContext rrb() {
		RrbContext _localctx = new RrbContext(Context, State);
		EnterRule(_localctx, 46, RULE_rrb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			_localctx.op = Match(RRB);
			State = 232;
			Match(Blank);
			State = 233;
			_localctx.arg1b = @byte();
			State = 234;
			Match(Blank);
			State = 235;
			_localctx.arg2b = @byte();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RrwContext : ParserRuleContext {
		public IToken op;
		public ByteContext arg1b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRW() { return GetToken(RedFoxAssemblyParser.RRW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext @byte() {
			return GetRuleContext<ByteContext>(0);
		}
		public RrwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rrw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRrw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRrw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRrw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RrwContext rrw() {
		RrwContext _localctx = new RrwContext(Context, State);
		EnterRule(_localctx, 48, RULE_rrw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			_localctx.op = Match(RRW);
			State = 238;
			Match(Blank);
			State = 239;
			_localctx.arg1b = @byte();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmbContext : ParserRuleContext {
		public IToken op;
		public WordContext arg1w;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB() { return GetToken(RedFoxAssemblyParser.RMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public RmbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRmb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRmb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmbContext rmb() {
		RmbContext _localctx = new RmbContext(Context, State);
		EnterRule(_localctx, 50, RULE_rmb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			_localctx.op = Match(RMB);
			State = 242;
			Match(Blank);
			State = 243;
			_localctx.arg1w = word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmwContext : ParserRuleContext {
		public IToken op;
		public WordContext arg1w;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMW() { return GetToken(RedFoxAssemblyParser.RMW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public RmwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRmw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRmw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmwContext rmw() {
		RmwContext _localctx = new RmwContext(Context, State);
		EnterRule(_localctx, 52, RULE_rmw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			_localctx.op = Match(RMW);
			State = 246;
			Match(Blank);
			State = 247;
			_localctx.arg1w = word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WrbContext : ParserRuleContext {
		public IToken op;
		public ByteContext arg1b;
		public ByteContext arg2b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Blank() { return GetTokens(RedFoxAssemblyParser.Blank); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank(int i) {
			return GetToken(RedFoxAssemblyParser.Blank, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRB() { return GetToken(RedFoxAssemblyParser.WRB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext[] @byte() {
			return GetRuleContexts<ByteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext @byte(int i) {
			return GetRuleContext<ByteContext>(i);
		}
		public WrbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wrb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterWrb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitWrb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WrbContext wrb() {
		WrbContext _localctx = new WrbContext(Context, State);
		EnterRule(_localctx, 54, RULE_wrb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_localctx.op = Match(WRB);
			State = 250;
			Match(Blank);
			State = 251;
			_localctx.arg1b = @byte();
			State = 252;
			Match(Blank);
			State = 253;
			_localctx.arg2b = @byte();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WrwContext : ParserRuleContext {
		public IToken op;
		public ByteContext arg1b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRW() { return GetToken(RedFoxAssemblyParser.WRW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext @byte() {
			return GetRuleContext<ByteContext>(0);
		}
		public WrwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wrw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterWrw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitWrw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WrwContext wrw() {
		WrwContext _localctx = new WrwContext(Context, State);
		EnterRule(_localctx, 56, RULE_wrw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			_localctx.op = Match(WRW);
			State = 256;
			Match(Blank);
			State = 257;
			_localctx.arg1b = @byte();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WmbContext : ParserRuleContext {
		public IToken op;
		public WordContext arg1w;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WMB() { return GetToken(RedFoxAssemblyParser.WMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public WmbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wmb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterWmb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitWmb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWmb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WmbContext wmb() {
		WmbContext _localctx = new WmbContext(Context, State);
		EnterRule(_localctx, 58, RULE_wmb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			_localctx.op = Match(WMB);
			State = 260;
			Match(Blank);
			State = 261;
			_localctx.arg1w = word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WmwContext : ParserRuleContext {
		public IToken op;
		public WordContext arg1w;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WMW() { return GetToken(RedFoxAssemblyParser.WMW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public WmwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wmw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterWmw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitWmw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWmw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WmwContext wmw() {
		WmwContext _localctx = new WmwContext(Context, State);
		EnterRule(_localctx, 60, RULE_wmw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			_localctx.op = Match(WMW);
			State = 264;
			Match(Blank);
			State = 265;
			_localctx.arg1w = word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RvbContext : ParserRuleContext {
		public IToken op;
		public ByteContext arg1b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RVB() { return GetToken(RedFoxAssemblyParser.RVB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext @byte() {
			return GetRuleContext<ByteContext>(0);
		}
		public RvbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rvb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRvb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRvb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRvb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RvbContext rvb() {
		RvbContext _localctx = new RvbContext(Context, State);
		EnterRule(_localctx, 62, RULE_rvb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_localctx.op = Match(RVB);
			State = 268;
			Match(Blank);
			State = 269;
			_localctx.arg1b = @byte();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RvwContext : ParserRuleContext {
		public IToken op;
		public WordContext arg1w;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RVW() { return GetToken(RedFoxAssemblyParser.RVW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public RvwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rvw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterRvw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitRvw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRvw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RvwContext rvw() {
		RvwContext _localctx = new RvwContext(Context, State);
		EnterRule(_localctx, 64, RULE_rvw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			_localctx.op = Match(RVW);
			State = 272;
			Match(Blank);
			State = 273;
			_localctx.arg1w = word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinContext : ParserRuleContext {
		public IToken op;
		public WordContext arg1w;
		public ByteContext arg2b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Blank() { return GetTokens(RedFoxAssemblyParser.Blank); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank(int i) {
			return GetToken(RedFoxAssemblyParser.Blank, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(RedFoxAssemblyParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext @byte() {
			return GetRuleContext<ByteContext>(0);
		}
		public SinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterSin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitSin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SinContext sin() {
		SinContext _localctx = new SinContext(Context, State);
		EnterRule(_localctx, 66, RULE_sin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			_localctx.op = Match(SIN);
			State = 276;
			Match(Blank);
			State = 277;
			_localctx.arg1w = word();
			State = 278;
			Match(Blank);
			State = 279;
			_localctx.arg2b = @byte();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public IToken op;
		public ByteContext arg1b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank() { return GetToken(RedFoxAssemblyParser.Blank, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RedFoxAssemblyParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext @byte() {
			return GetRuleContext<ByteContext>(0);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 68, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_localctx.op = Match(INT);
			State = 282;
			Match(Blank);
			State = 283;
			_localctx.arg1b = @byte();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SfgContext : ParserRuleContext {
		public IToken op;
		public ByteContext arg1b;
		public ByteContext arg2b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Blank() { return GetTokens(RedFoxAssemblyParser.Blank); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Blank(int i) {
			return GetToken(RedFoxAssemblyParser.Blank, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SFG() { return GetToken(RedFoxAssemblyParser.SFG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext[] @byte() {
			return GetRuleContexts<ByteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ByteContext @byte(int i) {
			return GetRuleContext<ByteContext>(i);
		}
		public SfgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sfg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterSfg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitSfg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSfg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SfgContext sfg() {
		SfgContext _localctx = new SfgContext(Context, State);
		EnterRule(_localctx, 70, RULE_sfg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_localctx.op = Match(SFG);
			State = 286;
			Match(Blank);
			State = 287;
			_localctx.arg1b = @byte();
			State = 288;
			Match(Blank);
			State = 289;
			_localctx.arg2b = @byte();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(RedFoxAssemblyParser.AND, 0); }
		public AndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndContext and() {
		AndContext _localctx = new AndContext(Context, State);
		EnterRule(_localctx, 72, RULE_and);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_localctx.op = Match(AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LorContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOR() { return GetToken(RedFoxAssemblyParser.LOR, 0); }
		public LorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterLor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitLor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LorContext lor() {
		LorContext _localctx = new LorContext(Context, State);
		EnterRule(_localctx, 74, RULE_lor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_localctx.op = Match(LOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(RedFoxAssemblyParser.XOR, 0); }
		public XorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorContext xor() {
		XorContext _localctx = new XorContext(Context, State);
		EnterRule(_localctx, 76, RULE_xor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			_localctx.op = Match(XOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(RedFoxAssemblyParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RedFoxAssemblyParser.Eof, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 78, RULE_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(End);
			State = 298;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordContext : ParserRuleContext {
		public IToken isHex;
		public BytedataContext _bytedata;
		public IList<BytedataContext> _hexData = new List<BytedataContext>();
		public IToken registerTarget;
		public BytedataContext registerData;
		public IToken val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexPrefix() { return GetToken(RedFoxAssemblyParser.HexPrefix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BytedataContext[] bytedata() {
			return GetRuleContexts<BytedataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BytedataContext bytedata(int i) {
			return GetRuleContext<BytedataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegisterPrefix() { return GetToken(RedFoxAssemblyParser.RegisterPrefix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RedFoxAssemblyParser.Identifier, 0); }
		public WordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_word; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordContext word() {
		WordContext _localctx = new WordContext(Context, State);
		EnterRule(_localctx, 80, RULE_word);
		int _la;
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HexPrefix:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300;
				_localctx.isHex = Match(HexPrefix);
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 301;
					_localctx._bytedata = bytedata();
					_localctx._hexData.Add(_localctx._bytedata);
					}
					}
					State = 304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Digit || _la==ByteLetter );
				}
				break;
			case RegisterPrefix:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306;
				_localctx.registerTarget = Match(RegisterPrefix);
				State = 307;
				_localctx.registerData = bytedata();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 308;
				_localctx.val = Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ByteContext : ParserRuleContext {
		public IToken isHex;
		public BytedataContext hexData;
		public IToken registerTarget;
		public BytedataContext registerData;
		public IToken val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexPrefix() { return GetToken(RedFoxAssemblyParser.HexPrefix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BytedataContext bytedata() {
			return GetRuleContext<BytedataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegisterPrefix() { return GetToken(RedFoxAssemblyParser.RegisterPrefix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RedFoxAssemblyParser.Identifier, 0); }
		public ByteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterByte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitByte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ByteContext @byte() {
		ByteContext _localctx = new ByteContext(Context, State);
		EnterRule(_localctx, 82, RULE_byte);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HexPrefix:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311;
				_localctx.isHex = Match(HexPrefix);
				State = 312;
				_localctx.hexData = bytedata();
				}
				break;
			case RegisterPrefix:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313;
				_localctx.registerTarget = Match(RegisterPrefix);
				State = 314;
				_localctx.registerData = bytedata();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 315;
				_localctx.val = Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BytedataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ByteLetter() { return GetTokens(RedFoxAssemblyParser.ByteLetter); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ByteLetter(int i) {
			return GetToken(RedFoxAssemblyParser.ByteLetter, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Digit() { return GetTokens(RedFoxAssemblyParser.Digit); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Digit(int i) {
			return GetToken(RedFoxAssemblyParser.Digit, i);
		}
		public BytedataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bytedata; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.EnterBytedata(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedFoxAssemblyListener typedListener = listener as IRedFoxAssemblyListener;
			if (typedListener != null) typedListener.ExitBytedata(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedFoxAssemblyVisitor<TResult> typedVisitor = visitor as IRedFoxAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBytedata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BytedataContext bytedata() {
		BytedataContext _localctx = new BytedataContext(Context, State);
		EnterRule(_localctx, 84, RULE_bytedata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			_la = TokenStream.LA(1);
			if ( !(_la==Digit || _la==ByteLetter) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 319;
			_la = TokenStream.LA(1);
			if ( !(_la==Digit || _la==ByteLetter) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,49,322,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		1,0,5,0,88,8,0,10,0,12,0,91,9,0,1,0,4,0,94,8,0,11,0,12,0,95,1,0,4,0,99,
		8,0,11,0,12,0,100,1,0,1,0,1,1,1,1,1,1,1,2,1,2,5,2,110,8,2,10,2,12,2,113,
		9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,123,8,3,1,4,1,4,1,4,1,4,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,139,8,5,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,3,6,150,8,6,1,7,1,7,1,7,1,8,1,8,1,8,4,8,158,8,8,11,8,12,8,
		159,1,8,1,8,4,8,164,8,8,11,8,12,8,165,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,3,9,197,8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
		1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,20,
		1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,
		1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
		1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
		1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,
		1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,
		1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,4,40,303,8,40,11,
		40,12,40,304,1,40,1,40,1,40,3,40,310,8,40,1,41,1,41,1,41,1,41,1,41,3,41,
		317,8,41,1,42,1,42,1,42,1,42,0,0,43,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,0,2,2,0,4,4,49,49,1,0,44,45,321,0,89,1,0,0,0,2,104,1,
		0,0,0,4,107,1,0,0,0,6,122,1,0,0,0,8,124,1,0,0,0,10,138,1,0,0,0,12,149,
		1,0,0,0,14,151,1,0,0,0,16,154,1,0,0,0,18,196,1,0,0,0,20,198,1,0,0,0,22,
		200,1,0,0,0,24,202,1,0,0,0,26,204,1,0,0,0,28,206,1,0,0,0,30,208,1,0,0,
		0,32,210,1,0,0,0,34,212,1,0,0,0,36,214,1,0,0,0,38,216,1,0,0,0,40,220,1,
		0,0,0,42,225,1,0,0,0,44,229,1,0,0,0,46,231,1,0,0,0,48,237,1,0,0,0,50,241,
		1,0,0,0,52,245,1,0,0,0,54,249,1,0,0,0,56,255,1,0,0,0,58,259,1,0,0,0,60,
		263,1,0,0,0,62,267,1,0,0,0,64,271,1,0,0,0,66,275,1,0,0,0,68,281,1,0,0,
		0,70,285,1,0,0,0,72,291,1,0,0,0,74,293,1,0,0,0,76,295,1,0,0,0,78,297,1,
		0,0,0,80,309,1,0,0,0,82,316,1,0,0,0,84,318,1,0,0,0,86,88,3,2,1,0,87,86,
		1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,93,1,0,0,0,91,89,
		1,0,0,0,92,94,3,6,3,0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,0,0,0,95,96,
		1,0,0,0,96,98,1,0,0,0,97,99,3,12,6,0,98,97,1,0,0,0,99,100,1,0,0,0,100,
		98,1,0,0,0,100,101,1,0,0,0,101,102,1,0,0,0,102,103,3,78,39,0,103,1,1,0,
		0,0,104,105,3,4,2,0,105,106,5,49,0,0,106,3,1,0,0,0,107,111,5,4,0,0,108,
		110,8,0,0,0,109,108,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,
		0,0,0,112,114,1,0,0,0,113,111,1,0,0,0,114,115,5,4,0,0,115,5,1,0,0,0,116,
		117,3,8,4,0,117,118,5,49,0,0,118,123,1,0,0,0,119,120,3,10,5,0,120,121,
		5,49,0,0,121,123,1,0,0,0,122,116,1,0,0,0,122,119,1,0,0,0,123,7,1,0,0,0,
		124,125,5,2,0,0,125,126,5,41,0,0,126,127,5,44,0,0,127,9,1,0,0,0,128,129,
		5,5,0,0,129,130,5,41,0,0,130,131,5,46,0,0,131,132,5,41,0,0,132,139,3,80,
		40,0,133,134,5,6,0,0,134,135,5,41,0,0,135,136,5,46,0,0,136,137,5,41,0,
		0,137,139,3,82,41,0,138,128,1,0,0,0,138,133,1,0,0,0,139,11,1,0,0,0,140,
		141,3,14,7,0,141,142,5,49,0,0,142,150,1,0,0,0,143,144,3,18,9,0,144,145,
		5,49,0,0,145,150,1,0,0,0,146,147,3,16,8,0,147,148,5,49,0,0,148,150,1,0,
		0,0,149,140,1,0,0,0,149,143,1,0,0,0,149,146,1,0,0,0,150,13,1,0,0,0,151,
		152,5,1,0,0,152,153,5,46,0,0,153,15,1,0,0,0,154,155,5,3,0,0,155,157,5,
		41,0,0,156,158,5,44,0,0,157,156,1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,
		0,159,160,1,0,0,0,160,163,1,0,0,0,161,162,5,41,0,0,162,164,3,82,41,0,163,
		161,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,17,1,0,
		0,0,167,197,3,20,10,0,168,197,3,22,11,0,169,197,3,24,12,0,170,197,3,26,
		13,0,171,197,3,28,14,0,172,197,3,30,15,0,173,197,3,32,16,0,174,197,3,34,
		17,0,175,197,3,36,18,0,176,197,3,38,19,0,177,197,3,40,20,0,178,197,3,42,
		21,0,179,197,3,44,22,0,180,197,3,46,23,0,181,197,3,48,24,0,182,197,3,50,
		25,0,183,197,3,52,26,0,184,197,3,54,27,0,185,197,3,56,28,0,186,197,3,58,
		29,0,187,197,3,60,30,0,188,197,3,62,31,0,189,197,3,64,32,0,190,197,3,66,
		33,0,191,197,3,68,34,0,192,197,3,70,35,0,193,197,3,72,36,0,194,197,3,74,
		37,0,195,197,3,76,38,0,196,167,1,0,0,0,196,168,1,0,0,0,196,169,1,0,0,0,
		196,170,1,0,0,0,196,171,1,0,0,0,196,172,1,0,0,0,196,173,1,0,0,0,196,174,
		1,0,0,0,196,175,1,0,0,0,196,176,1,0,0,0,196,177,1,0,0,0,196,178,1,0,0,
		0,196,179,1,0,0,0,196,180,1,0,0,0,196,181,1,0,0,0,196,182,1,0,0,0,196,
		183,1,0,0,0,196,184,1,0,0,0,196,185,1,0,0,0,196,186,1,0,0,0,196,187,1,
		0,0,0,196,188,1,0,0,0,196,189,1,0,0,0,196,190,1,0,0,0,196,191,1,0,0,0,
		196,192,1,0,0,0,196,193,1,0,0,0,196,194,1,0,0,0,196,195,1,0,0,0,197,19,
		1,0,0,0,198,199,5,8,0,0,199,21,1,0,0,0,200,201,5,9,0,0,201,23,1,0,0,0,
		202,203,5,10,0,0,203,25,1,0,0,0,204,205,5,11,0,0,205,27,1,0,0,0,206,207,
		5,12,0,0,207,29,1,0,0,0,208,209,5,13,0,0,209,31,1,0,0,0,210,211,5,14,0,
		0,211,33,1,0,0,0,212,213,5,15,0,0,213,35,1,0,0,0,214,215,5,16,0,0,215,
		37,1,0,0,0,216,217,5,17,0,0,217,218,5,41,0,0,218,219,3,80,40,0,219,39,
		1,0,0,0,220,221,5,18,0,0,221,222,5,41,0,0,222,223,3,80,40,0,223,224,3,
		82,41,0,224,41,1,0,0,0,225,226,5,19,0,0,226,227,5,41,0,0,227,228,3,80,
		40,0,228,43,1,0,0,0,229,230,5,20,0,0,230,45,1,0,0,0,231,232,5,21,0,0,232,
		233,5,41,0,0,233,234,3,82,41,0,234,235,5,41,0,0,235,236,3,82,41,0,236,
		47,1,0,0,0,237,238,5,22,0,0,238,239,5,41,0,0,239,240,3,82,41,0,240,49,
		1,0,0,0,241,242,5,23,0,0,242,243,5,41,0,0,243,244,3,80,40,0,244,51,1,0,
		0,0,245,246,5,24,0,0,246,247,5,41,0,0,247,248,3,80,40,0,248,53,1,0,0,0,
		249,250,5,25,0,0,250,251,5,41,0,0,251,252,3,82,41,0,252,253,5,41,0,0,253,
		254,3,82,41,0,254,55,1,0,0,0,255,256,5,26,0,0,256,257,5,41,0,0,257,258,
		3,82,41,0,258,57,1,0,0,0,259,260,5,27,0,0,260,261,5,41,0,0,261,262,3,80,
		40,0,262,59,1,0,0,0,263,264,5,28,0,0,264,265,5,41,0,0,265,266,3,80,40,
		0,266,61,1,0,0,0,267,268,5,29,0,0,268,269,5,41,0,0,269,270,3,82,41,0,270,
		63,1,0,0,0,271,272,5,30,0,0,272,273,5,41,0,0,273,274,3,80,40,0,274,65,
		1,0,0,0,275,276,5,31,0,0,276,277,5,41,0,0,277,278,3,80,40,0,278,279,5,
		41,0,0,279,280,3,82,41,0,280,67,1,0,0,0,281,282,5,32,0,0,282,283,5,41,
		0,0,283,284,3,82,41,0,284,69,1,0,0,0,285,286,5,33,0,0,286,287,5,41,0,0,
		287,288,3,82,41,0,288,289,5,41,0,0,289,290,3,82,41,0,290,71,1,0,0,0,291,
		292,5,34,0,0,292,73,1,0,0,0,293,294,5,35,0,0,294,75,1,0,0,0,295,296,5,
		36,0,0,296,77,1,0,0,0,297,298,5,7,0,0,298,299,5,0,0,1,299,79,1,0,0,0,300,
		302,5,38,0,0,301,303,3,84,42,0,302,301,1,0,0,0,303,304,1,0,0,0,304,302,
		1,0,0,0,304,305,1,0,0,0,305,310,1,0,0,0,306,307,5,37,0,0,307,310,3,84,
		42,0,308,310,5,46,0,0,309,300,1,0,0,0,309,306,1,0,0,0,309,308,1,0,0,0,
		310,81,1,0,0,0,311,312,5,38,0,0,312,317,3,84,42,0,313,314,5,37,0,0,314,
		317,3,84,42,0,315,317,5,46,0,0,316,311,1,0,0,0,316,313,1,0,0,0,316,315,
		1,0,0,0,317,83,1,0,0,0,318,319,7,1,0,0,319,320,7,1,0,0,320,85,1,0,0,0,
		13,89,95,100,111,122,138,149,159,165,196,304,309,316
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RedFoxAssembly.AntlrBuild
